ARG BASE_IMAGE_ARM="ghcr.io/sonia-auv/sonia_common/sonia_common:arm64-perception-l4t-feature-l4t-tensorflow"

FROM ${BASE_IMAGE_ARM}

USER root

ARG BUILD_DATE
ARG VERSION

ENV NODE_NAME=proc_detection

LABEL net.etsmtl.sonia-auv.node.build-date=${BUILD_DATE}
LABEL net.etsmtl.sonia-auv.node.version=${VERSION}
LABEL net.etsmtl.sonia-auv.node.name=${NODE_NAME}


ENV SONIA_WS=${SONIA_HOME}/ros_sonia_ws
ENV CV_BRIDGE_INSTALL=${SONIA_WS}/cv_bridge_workspace/install/setup.bash

ENV NODE_NAME=${NODE_NAME}
ENV NODE_PATH=${SONIA_WS}/src/${NODE_NAME}
ENV LAUNCH_FILE=${NODE_NAME}.launch
ENV SCRIPT_DIR=${SONIA_WS}/scripts
ENV ENTRYPOINT_FILE=sonia_entrypoint_arm64.sh
ENV LAUNCH_ABSPATH=${NODE_PATH}/launch/${LAUNCH_FILE}
ENV ENTRYPOINT_ABSPATH=${NODE_PATH}/scripts/${ENTRYPOINT_FILE}

ENV SONIA_WS_SETUP=${SONIA_WS}/devel/setup.bash

WORKDIR ${SONIA_WS}

##################################################### this part of code is taken from jetson-containers/Dockerfile.tensorflow ##################################

# Copyright (c) 2020, NVIDIA CORPORATION. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

#
# setup environment
#
ENV DEBIAN_FRONTEND=noninteractive
ENV ROS_PYTHON_VERSION=3
ARG HDF5_DIR="/usr/lib/aarch64-linux-gnu/hdf5/serial/"
ARG MAKEFLAGS=-j$(nproc)

RUN printenv


#
# install prerequisites - https://docs.nvidia.com/deeplearning/frameworks/install-tf-jetson-platform/index.html#prereqs
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          python3-pip \
		  python3-dev \
		  gfortran \
		  build-essential \
		  liblapack-dev \ 
		  libblas-dev \
		  libhdf5-serial-dev \
		  hdf5-tools \
		  libhdf5-dev \
		  zlib1g-dev \
		  zip \
		  unzip \
		  libjpeg8-dev \
		  autoconf \ 
		  automake \
		  libtool \
		  curl \
		  make \
		  g++ \
		  python3-yaml \
    		  python-catkin-tools \
		  python3-catkin-pkg-modules \
		  python3-opencv \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean


RUN pip3 install --no-cache-dir setuptools Cython wheel

#
# build protobuf using cpp implementation
# https://jkjung-avt.github.io/tf-trt-revisited/
#
#ARG PROTOBUF_VERSION=3.19.4
#ARG PROTOBUF_URL=https://github.com/protocolbuffers/protobuf/releases/download/v${PROTOBUF_VERSION}
#ARG PROTOBUF_DIR=protobuf-python-${PROTOBUF_VERSION}
#ARG PROTOC_DIR=protoc-${PROTOBUF_VERSION}-linux-aarch_64
#ENV PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=cpp

#RUN cd /tmp && \
#    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${PROTOBUF_URL}/$PROTOBUF_DIR.zip && \
#    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${PROTOBUF_URL}/$PROTOC_DIR.zip && \
#    unzip ${PROTOBUF_DIR}.zip -d ${PROTOBUF_DIR} && \
#    unzip ${PROTOC_DIR}.zip -d ${PROTOC_DIR} && \
#    cp ${PROTOC_DIR}/bin/protoc /usr/local/bin/protoc && \
#    cd ${PROTOBUF_DIR}/protobuf-${PROTOBUF_VERSION} && \
#    ./autogen.sh && \
#   ./configure --prefix=/usr/local && \
#    make -j$(nproc) && \
#    make check -j4 && \
#    make install && \
#    ldconfig && \
#    cd python && \
#    python3 setup.py build --cpp_implementation && \
#    python3 setup.py test --cpp_implementation && \
#    python3 setup.py bdist_wheel --cpp_implementation && \
#    cp dist/*.whl /opt && \
#    pip3 install dist/*.whl && \
#    cd ../../../ && \
#    rm ${PROTOBUF_DIR}.zip && \
#    rm ${PROTOC_DIR}.zip && \
#    rm -rf ${PROTOBUF_DIR} && \
#    rm -rf ${PROTOC_DIR}

    
#RUN pip3 show protobuf && \
#    protoc --version

#RUN pip3 install --no-cache-dir numpy==1.19.2
#RUN H5PY_SETUP_REQUIRES=0 pip3 install --no-cache-dir --verbose h5py==3.1.0
#RUN pip3 install absl-py==0.12.0 astunparse==1.6.3 clang==5.0 flatbuffers==1.12.0 google-pasta==0.2 keras-preprocessing==1.1.2 opt-einsum==3.3.0 six==1.15.0 termcolor==1.1.0 typing-extensions==3.7.4 wrapt==1.12.1 gast==0.4.0 tensorboard==2.6 tensorflow-estimator==2.6 keras==2.6 grpcio==1.44.0 future==0.18.2 mock==3.0.5 futures pybind11
#
# TensorFlow 
#
#ARG TENSORFLOW_URL=https://developer.download.nvidia.com/compute/redist/jp/v46/tensorflow/tensorflow-2.6.0+nv21.11-cp36-cp36m-linux_aarch64.whl
#ARG TENSORFLOW_WHL=tensorflow-2.6.0+nv21.11-cp36-cp36m-linux_aarch64.whl

#RUN wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${TENSORFLOW_URL} -O ${TENSORFLOW_WHL}
#RUN pip3 install --no-cache-dir --verbose ${TENSORFLOW_WHL}
#RUN rm ${TENSORFLOW_WHL}

# 
# PyCUDA
#
#ENV PATH="/usr/local/cuda/bin:${PATH}"
#ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:${LD_LIBRARY_PATH}"
#RUN echo "$PATH" && echo "$LD_LIBRARY_PATH"

#RUN pip3 install --no-cache-dir --verbose pycuda six

#########################################################################################################################################################################################

# install cv_bridge for python3
RUN bash -c " mkdir -p cv_bridge_workspace/src; \
    cd cv_bridge_workspace; \
    catkin init; \
    catkin config -DPYTHON_EXECUTABLE=/usr/bin/python3 -DPYTHON_INCLUDE_DIR=/usr/include/python3.6m -DPYTHON_LIBRARY=/usr/lib/aarch64-linux-gnu/libpython3.6m.so; \
    catkin config --install; \
    git clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv; \
    cd src/vision_opencv; \
    git checkout melodic; \
    cd ../..; \
    source ${ROS_WS_SETUP}; \ 
    source ${BASE_LIB_WS_SETUP}; \
    catkin build cv_bridge"

COPY . ${NODE_PATH}

RUN bash -c "pip3 install rospkg catkin_pkg"

RUN bash -c "source ${ROS_WS_SETUP}; source ${BASE_LIB_WS_SETUP}; catkin_make"

RUN chown -R ${SONIA_USER}: ${SONIA_WS}

RUN chown -R sonia:sonia /home/sonia/ros_sonia_ws/src/proc_detection/external

USER ${SONIA_USER}

RUN mkdir ${SCRIPT_DIR}
RUN cat $ENTRYPOINT_ABSPATH > ${SCRIPT_DIR}/entrypoint.sh
RUN echo "roslaunch --wait $LAUNCH_ABSPATH" > ${SCRIPT_DIR}/launch.sh

RUN chmod +x ${SCRIPT_DIR}/entrypoint.sh && chmod +x ${SCRIPT_DIR}/launch.sh

RUN echo "source $SONIA_WS_SETUP" >> ~/.bashrc

ENTRYPOINT ["./scripts/entrypoint.sh"]
CMD ["./scripts/launch.sh"]
